---
- name: Configure Fedora Desktop for robotboy-code
  hosts: localhost
  connection: local
  become: yes

  vars_prompt:
    - name: desktop_environment
      prompt: "Which desktop environment do you want to install? (gnome/i3/hyprland)"
      private: no
    - name: virtualization_platform
      prompt: "Are you using VMware or UTM? (vmware/utm/none)"
      private: no

  vars:
    target_hostname: robotboy-code
    ansible_user_to_configure: "{{ lookup('env', 'USER') }}"
    user_home_to_configure: "{{ lookup('env', 'HOME') }}"
    nvm_version: "v0.40.3"
    node_version_to_install: "22"
    hyprland_config_dir: "{{ user_home_to_configure }}/.config/hypr"

  tasks:

    - name: Ensure prerequisite packages
      ansible.builtin.dnf:
        name:
          - dnf-plugins-core
          - curl
          - git
        state: present

    - name: Set system hostname
      ansible.builtin.hostname:
        name: "{{ target_hostname }}"
      notify: Reboot system for hostname

    #########################################################################
    # Desktop Environment Installations
    #########################################################################

    - name: Install GNOME
      ansible.builtin.dnf:
        name: "@gnome-desktop"
        state: present
      when: desktop_environment == "gnome"

    - name: Install GNOME Tweaks & Extensions
      ansible.builtin.dnf:
        name:
          - gnome-tweaks
          - gnome-extensions-app
          - gnome-shell-extension-dash-to-panel
          - gnome-shell-extension-system-monitor
        state: present
      when: desktop_environment == "gnome"

    - name: Install i3 Window Manager
      ansible.builtin.dnf:
        name:
          - i3
          - dmenu
          - i3status
          - i3lock
          - xbacklight
          - xorg-x11-server-Xorg
          - xinit
          - urxvt
        state: present
      when: desktop_environment == "i3"

    - name: Enable Hyprland COPR repo
      ansible.builtin.command: dnf copr enable -y solopasha/hyprland
      when: desktop_environment == "hyprland"

    - name: Install Hyprland and dependencies
      ansible.builtin.dnf:
        name:
          - hyprland
          - waybar
          - rofi-wayland
          - wl-clipboard
          - brightnessctl
          - grim
          - slurp
          - swaylock
          - swayidle
          - xdg-desktop-portal-hyprland
        state: present
      when: desktop_environment == "hyprland"

    - name: Create Hyprland config directory
      ansible.builtin.file:
        path: "{{ hyprland_config_dir }}"
        state: directory
        owner: "{{ ansible_user_to_configure }}"
        group: "{{ ansible_user_to_configure }}"
        mode: '0755'
      when: desktop_environment == "hyprland"

    - name: Add basic Hyprland config
      ansible.builtin.copy:
        dest: "{{ hyprland_config_dir }}/hyprland.conf"
        content: |
          monitor=,preferred,auto,1
          exec-once = waybar & rofi -show drun
          input {
              kb_layout = us
              follow_mouse = 1
          }
          general {
              gaps_in = 5
              gaps_out = 20
              border_size = 2
              col.active_border = rgba(33ccffee) rgba(00ff99ee) 45deg
              col.inactive_border = rgba(595959aa)
          }
        owner: "{{ ansible_user_to_configure }}"
        group: "{{ ansible_user_to_configure }}"
        mode: '0644'
      when: desktop_environment == "hyprland"

    - name: Set graphical.target as default
      ansible.builtin.command: systemctl set-default graphical.target

    #########################################################################
    # Virtualization-Specific Tools
    #########################################################################

    - name: Install VMware Tools
      ansible.builtin.dnf:
        name:
          - open-vm-tools
          - open-vm-tools-desktop
        state: present
      when: virtualization_platform == "vmware"

    - name: Enable vmtoolsd.service
      ansible.builtin.systemd:
        name: vmtoolsd.service
        enabled: true
        state: started
        daemon_reload: true
      when: virtualization_platform == "vmware"

    - name: Install UTM dependencies (spice-vdagent)
      ansible.builtin.dnf:
        name: spice-vdagent
        state: present
      when: virtualization_platform == "utm"

    #########################################################################
    # Development Tools
    #########################################################################

    - name: Set Git name and email
      ansible.builtin.shell: |
        git config --global user.name "drowsyrobotboy"
        git config --global user.email "maruthisharma@live.in"
        git config --global init.defaultBranch main
      become_user: "{{ ansible_user_to_configure }}"

    - name: Install Zig, Go, Alacritty
      ansible.builtin.dnf:
        name:
          - zig
          - golang
          - alacritty
        state: present

    - name: Check for Rust
      ansible.builtin.command: rustc --version
      register: rustc_check
      ignore_errors: yes

    - name: Install Rust with rustup
      ansible.builtin.shell: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      args:
        executable: /bin/bash
      when: rustc_check.rc != 0
      become_user: "{{ ansible_user_to_configure }}"

    - name: Add Rust to PATH
      ansible.builtin.lineinfile:
        path: "{{ user_home_to_configure }}/.bashrc"
        line: 'export PATH="$HOME/.cargo/bin:$PATH"'
        state: present

    - name: Check if NVM is installed
      ansible.builtin.stat:
        path: "{{ user_home_to_configure }}/.nvm/nvm.sh"
      register: nvm_script_stat
      become_user: "{{ ansible_user_to_configure }}"

    - name: Download NVM installer
      ansible.builtin.get_url:
        url: "https://raw.githubusercontent.com/nvm-sh/nvm/{{ nvm_version }}/install.sh"
        dest: /tmp/nvm_install.sh
        mode: '0755'
      when: not nvm_script_stat.stat.exists

    - name: Install NVM
      ansible.builtin.shell: bash /tmp/nvm_install.sh
      become_user: "{{ ansible_user_to_configure }}"
      environment:
        HOME: "{{ user_home_to_configure }}"
      args:
        creates: "{{ user_home_to_configure }}/.nvm/nvm.sh"
      when: not nvm_script_stat.stat.exists

    - name: Configure NVM in bashrc
      ansible.builtin.blockinfile:
        path: "{{ user_home_to_configure }}/.bashrc"
        marker: "# {mark} ANSIBLE MANAGED NVM BLOCK"
        block: |
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
      become_user: "{{ ansible_user_to_configure }}"

    - name: Install Node.js with NVM
      ansible.builtin.shell: |
        export NVM_DIR="{{ user_home_to_configure }}/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        nvm install {{ node_version_to_install }}
        nvm alias default {{ node_version_to_install }}
      args:
        executable: /bin/bash
      become_user: "{{ ansible_user_to_configure }}"
      when: nvm_script_stat.stat.exists

    #########################################################################
    # Install VS Code, Docker, Tailscale
    #########################################################################

    - name: Add VS Code repo and key
      block:
        - name: Import Microsoft GPG key
          ansible.builtin.rpm_key:
            state: present
            key: https://packages.microsoft.com/keys/microsoft.asc
        - name: Add VS Code repository
          ansible.builtin.yum_repository:
            name: vscode
            baseurl: https://packages.microsoft.com/yumrepos/vscode
            enabled: yes
            gpgcheck: yes
            gpgkey: https://packages.microsoft.com/keys/microsoft.asc

    - name: Install VS Code
      ansible.builtin.dnf:
        name: code
        state: present

    - name: Add Docker repository and key
      block:
        - name: Docker GPG key
          ansible.builtin.rpm_key:
            state: present
            key: https://download.docker.com/linux/fedora/gpg
        - name: Docker repo
          ansible.builtin.yum_repository:
            name: docker-ce-stable
            baseurl: "https://download.docker.com/linux/fedora/{{ ansible_distribution_major_version }}/$basearch/stable"
            enabled: yes
            gpgcheck: yes
            gpgkey: https://download.docker.com/linux/fedora/gpg

    - name: Install Docker
      ansible.builtin.dnf:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present

    - name: Enable and start Docker
      ansible.builtin.systemd:
        name: docker
        enabled: yes
        state: started

    - name: Add user to docker group
      ansible.builtin.user:
        name: "{{ ansible_user_to_configure }}"
        groups: docker
        append: yes
      notify: Docker group info

    - name: Install Tailscale using official script
      ansible.builtin.shell: curl -fsSL https://tailscale.com/install.sh | sh
      args:
        executable: /bin/bash

    #########################################################################
    # Browser (Chrome or Chromium)
    #########################################################################

    - name: Gather architecture
      ansible.builtin.setup:
        filter: ansible_architecture

    - name: Install Google Chrome for x86_64
      block:
        - name: Chrome repo
          ansible.builtin.yum_repository:
            name: google-chrome
            baseurl: http://dl.google.com/linux/chrome/rpm/stable/$basearch
            enabled: yes
            gpgcheck: yes
            gpgkey: https://dl.google.com/linux/linux_signing_key.pub
        - name: Install Chrome
          ansible.builtin.dnf:
            name: google-chrome-stable
            state: present
      when: ansible_facts.architecture == "x86_64"

    - name: Install Chromium (non-x86_64)
      ansible.builtin.dnf:
        name: chromium
        state: present
      when: ansible_facts.architecture != "x86_64"
      
    #########################################################################
    # Browser (Firefox)
    #########################################################################
    
    - name: Install Firefox browser
      ansible.builtin.dnf:
        name: firefox
        state: present

  handlers:
    - name: Docker group info
      ansible.builtin.debug:
        msg: "User {{ ansible_user_to_configure }} added to docker group. You may need to log out and log in again."

    - name: Reboot system for hostname
      ansible.builtin.reboot:
        msg: "Rebooting system to apply hostname changes."
        when: false
