---
- name: Configure Fedora Desktop for robotboy-code
  hosts: localhost
  connection: local
  become: yes

  vars_prompt:
    - name: desktop_environment
      prompt: "Which desktop environment do you want to install? (gnome/i3)"
      private: no
      default: "i3"
    - name: virtualization_platform
      prompt: "Are you using VMware or UTM? (vmware/utm/none)"
      private: no
      default: "vmware"

  vars:
    target_hostname: robotboy-code
    # Use ansible_env.USER and ansible_env.HOME for more reliable access
    # to the current user's information when running on localhost with connection: local.
    ansible_user_to_configure: "{{ ansible_env.USER }}"
    user_home_to_configure: "{{ ansible_env.HOME }}"
    nvm_version: "v0.40.3"
    node_version_to_install: "22"

  tasks:

    - name: Ensure prerequisite packages are installed
      ansible.builtin.dnf:
        name:
          - dnf-plugins-core
          - curl
          - git
          - wget
        state: present

    - name: Set system hostname
      ansible.builtin.hostname:
        name: "{{ target_hostname }}"

    #########################################################################
    # Desktop Environment Installations
    #########################################################################

    - name: Install GNOME Desktop Environment
      ansible.builtin.dnf:
        name: "@gnome-desktop"
        state: present
      when: desktop_environment == "gnome"

    - name: Install GNOME Tweaks & Extensions
      ansible.builtin.dnf:
        name:
          - gnome-tweaks
          - gnome-extensions-app
        state: present
      when: desktop_environment == "gnome"

    - name: Install GNOME Shell Extensions (if available)
      ansible.builtin.dnf:
        name:
          - gnome-shell-extension-dash-to-panel
          - gnome-shell-extension-system-monitor
        state: present
        # Use ignore_errors in case these specific extensions are not found
        # or have different names on certain Fedora versions.
        ignore_errors: yes
      when: desktop_environment == "gnome"

    - name: Install i3 Window Manager and dependencies
      ansible.builtin.dnf:
        name:
          - i3
          - dmenu
          - nemo
          - i3status
          - i3lock
          - xbacklight
          - xorg-x11-server-Xorg
          - xinit
          - rxvt-unicode
          - lightdm
          - lightdm-gtk
          - alacritty # Ensure Alacritty is installed for i3
        state: present
      when: desktop_environment == "i3"

    - name: Enable LightDM for i3
      ansible.builtin.systemd:
        name: lightdm
        enabled: yes
      when: desktop_environment == "i3"

    - name: Set graphical.target as default
      ansible.builtin.command: systemctl set-default graphical.target
      notify: Set graphical target

    #########################################################################
    # Virtualization-Specific Tools
    #########################################################################

    - name: Install VMware Tools
      ansible.builtin.dnf:
        name:
          - open-vm-tools
          - open-vm-tools-desktop
        state: present
      when: virtualization_platform == "vmware"

    - name: Enable and start vmtoolsd.service
      ansible.builtin.systemd:
        name: vmtoolsd.service
        enabled: true
        state: started
      when: virtualization_platform == "vmware"

    - name: Install UTM dependencies (spice-vdagent)
      ansible.builtin.dnf:
        name: spice-vdagent
        state: present
      when: virtualization_platform == "utm"

    - name: Enable and start spice-vdagent
      ansible.builtin.systemd:
        name: spice-vdagentd
        enabled: true
        state: started
      when: virtualization_platform == "utm"

    #########################################################################
    # Development Tools
    #########################################################################

    - name: Set Git name and email
      ansible.builtin.shell: |
        git config --global user.name "drowsyrobotboy"
        git config --global user.global user.email "maruthisharma@live.in"
        git config --global init.defaultBranch main
      become_user: "{{ ansible_user_to_configure }}"
      # This task will run as the specified user to configure their global Git settings.

    - name: Install Zig, Go, Alacritty
      ansible.builtin.dnf:
        name:
          - zig
          - golang
          - alacritty
        state: present

    - name: Check if Rust is installed
      ansible.builtin.stat:
        path: "{{ user_home_to_configure }}/.cargo/bin/rustc"
      register: rust_installed
      become: yes
      become_user: "{{ ansible_user_to_configure }}"

    - name: Install Rust with rustup
      ansible.builtin.shell: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      args:
        executable: /bin/bash
      when: not rust_installed.stat.exists
      become: yes
      become_user: "{{ ansible_user_to_configure }}"
      environment:
        HOME: "{{ user_home_to_configure }}"

    - name: Check if NVM is installed
      ansible.builtin.stat:
        path: "{{ user_home_to_configure }}/.nvm/nvm.sh"
      register: nvm_script_stat
      become: yes
      become_user: "{{ ansible_user_to_configure }}"

    - name: Download and install NVM
      ansible.builtin.shell: |
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/{{ nvm_version }}/install.sh | bash
      args:
        executable: /bin/bash
      when: not nvm_script_stat.stat.exists
      become: yes
      become_user: "{{ ansible_user_to_configure }}"
      environment:
        HOME: "{{ user_home_to_configure }}"

    - name: Install Node.js with NVM
      ansible.builtin.shell: |
        export NVM_DIR="{{ user_home_to_configure }}/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        nvm install {{ node_version_to_install }}
        nvm alias default {{ node_version_to_install }}
      args:
        executable: /bin/bash
      become: yes
      become_user: "{{ ansible_user_to_configure }}"
      environment:
        HOME: "{{ user_home_to_configure }}"
      when: not nvm_script_stat.stat.exists

    #########################################################################
    # Install VS Code, Docker, Tailscale
    #########################################################################

    - name: Import Microsoft GPG key for VS Code
      ansible.builtin.rpm_key:
        state: present
        key: https://packages.microsoft.com/keys/microsoft.asc

    - name: Add VS Code repository
      ansible.builtin.yum_repository:
        name: vscode
        description: Visual Studio Code
        baseurl: https://packages.microsoft.com/yumrepos/vscode
        enabled: yes
        gpgcheck: yes
        gpgkey: https://packages.microsoft.com/keys/microsoft.asc

    - name: Install VS Code
      ansible.builtin.dnf:
        name: code
        state: present

    - name: Import Docker GPG key
      ansible.builtin.rpm_key:
        state: present
        key: https://download.docker.com/linux/fedora/gpg

    - name: Add Docker repository
      ansible.builtin.yum_repository:
        name: docker-ce-stable
        description: Docker CE Stable
        baseurl: "https://download.docker.com/linux/fedora/{{ ansible_distribution_major_version }}/$basearch/stable"
        enabled: yes
        gpgcheck: yes
        gpgkey: https://download.docker.com/linux/fedora/gpg

    - name: Install Docker
      ansible.builtin.dnf:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present

    - name: Enable and start Docker
      ansible.builtin.systemd:
        name: docker
        enabled: yes
        state: started

    - name: Add user to docker group
      ansible.builtin.user:
        name: "{{ ansible_user_to_configure }}"
        groups: docker
        append: yes
      notify: Docker group info

    - name: Add Tailscale repository
      ansible.builtin.yum_repository:
        name: tailscale-stable
        description: Tailscale stable
        baseurl: "https://pkgs.tailscale.com/stable/fedora/{{ ansible_distribution_major_version }}/$basearch"
        enabled: yes
        gpgcheck: yes
        gpgkey: https://pkgs.tailscale.com/stable/fedora/repo.gpg

    - name: Install Tailscale
      ansible.builtin.dnf:
        name: tailscale
        state: present

    - name: Enable Tailscale service
      ansible.builtin.systemd:
        name: tailscaled
        enabled: yes
      notify: Tailscale setup info

    #########################################################################
    # Browser Installation
    #########################################################################

    - name: Gather architecture facts
      ansible.builtin.setup:
        filter: ansible_architecture

    - name: Install Google Chrome for x86_64
      block:
        - name: Add Google Chrome repository
          ansible.builtin.yum_repository:
            name: google-chrome
            description: Google Chrome
            baseurl: http://dl.google.com/linux/chrome/rpm/stable/$basearch
            enabled: yes
            gpgcheck: yes
            gpgkey: https://dl.google.com/linux/linux_signing_key.pub

        - name: Install Google Chrome
          ansible.builtin.dnf:
            name: google-chrome-stable
            state: present
      when: ansible_facts.architecture == "x86_64"

    - name: Install Chromium for non-x86_64 architectures
      ansible.builtin.dnf:
        name: chromium
        state: present
      when: ansible_facts.architecture != "x86_64"

    - name: Install Firefox browser
      ansible.builtin.dnf:
        name: firefox
        state: present

    #########################################################################
    # Icon Theme Installation
    #########################################################################

    - name: Ensure .icons directory exists for Papirus
      ansible.builtin.file:
        path: "{{ user_home_to_configure }}/.icons"
        state: directory
        mode: '0755'
        owner: "{{ ansible_user_to_configure }}"
        group: "{{ ansible_user_to_configure }}"
      when: desktop_environment == "gnome"

    - name: Check if Papyrus icon theme is installed
      ansible.builtin.stat:
        path: "{{ user_home_to_configure }}/.icons/Papirus"
      register: papyrus_theme_stat
      become: yes
      become_user: "{{ ansible_user_to_configure }}"
      when: desktop_environment == "gnome"

    - name: Install Papyrus icon theme
      ansible.builtin.shell: |
        wget -qO- https://git.io/papirus-icon-theme-install | sh
      args:
        executable: /bin/bash
      become: yes
      become_user: "{{ ansible_user_to_configure }}"
      environment:
        HOME: "{{ user_home_to_configure }}"
      when: (desktop_environment == "gnome") and not papyrus_theme_stat.stat.exists

  handlers:
    - name: Set graphical target
      ansible.builtin.command: systemctl set-default graphical.target

    - name: Docker group info
      ansible.builtin.debug:
        msg: "User {{ ansible_user_to_configure }} added to docker group. You may need to log out and log in again for Docker permissions to take effect."

    - name: Tailscale setup info
      ansible.builtin.debug:
        msg: "Tailscale installed and service enabled. Run 'sudo tailscale up' to connect to your Tailnet."