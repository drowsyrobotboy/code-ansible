---
- name: Configure Fedora Desktop for robotboy-code
  hosts: localhost
  connection: local
  become: yes

  vars_prompt:
    - name: desktop_environment
      prompt: "Which desktop environment do you want to install? (gnome/i3)"
      private: no
      default: "gnome"
    - name: virtualization_platform
      prompt: "Are you using VMware or UTM? (vmware/utm/none)"
      private: no
      default: "none"

  vars:
    target_hostname: robotboy-code
    # Use ansible_env.USER and ansible_env.HOME for more reliable access
    # to the current user's information when running on localhost with connection: local.
    ansible_user_to_configure: "{{ ansible_env.USER }}"
    user_home_to_configure: "{{ ansible_env.HOME }}"
    nvm_version: "v0.40.3"
    node_version_to_install: "22"

  tasks:

    - name: Ensure prerequisite packages are installed
      ansible.builtin.dnf:
        name:
          - dnf-plugins-core
          - curl
          - git
          - wget
        state: present

    - name: Set system hostname
      ansible.builtin.hostname:
        name: "{{ target_hostname }}"

    #########################################################################
    # Desktop Environment Installations
    #########################################################################

    - name: Install GNOME Desktop Environment
      ansible.builtin.dnf:
        name: "@gnome-desktop"
        state: present
      when: desktop_environment == "gnome"

    - name: Install GNOME Tweaks & Extensions
      ansible.builtin.dnf:
        name:
          - gnome-tweaks
          - gnome-extensions-app
        state: present
      when: desktop_environment == "gnome"

    - name: Install GNOME Shell Extensions (if available)
      ansible.builtin.dnf:
        name:
          - gnome-shell-extension-dash-to-panel
          - gnome-shell-extension-system-monitor
        state: present
        # Use ignore_errors in case these specific extensions are not found
        # or have different names on certain Fedora versions.
        ignore_errors: yes
      when: desktop_environment == "gnome"

    - name: Install i3 Window Manager and dependencies
      ansible.builtin.dnf:
        name:
          - i3
          - dmenu
          - i3status
          - i3lock
          - xbacklight
          - xorg-x11-server-Xorg
          - xinit
          - rxvt-unicode
          - lightdm
          - lightdm-gtk
          - alacritty # Ensure Alacritty is installed for i3
        state: present
      when: desktop_environment == "i3"

    - name: Configure i3 Window Manager
      ansible.builtin.blockinfile:
        path: "{{ user_home_to_configure }}/.config/i3/config"
        create: yes
        owner: "{{ ansible_user_to_configure }}"
        group: "{{ ansible_user_to_configure }}"
        mode: '0644'
        block: |
          # i3 config file (v4)
          # Please see http://i3wm.org/docs/userguide.html for a complete reference!

          # Set the main modifier key to Left Alt (Mod1)
          set $mod Mod1

          # Font for window titles. Will also be used by the bar unless a different font
          # is used in the bar {} block below.
          font pango:monospace 8

          # This font is widely installed, provides lots of unicode glyphs, right-to-left
          # text rendering and scalability on retina/hidpi displays (thanks to pango).
          # font pango:DejaVu Sans Mono 8

          # Use Mouse+$mod to drag floating windows to their wanted position
          floating_modifier $mod

          # start a terminal
          bindsym $mod+Return exec alacritty

          # kill focused window
          bindsym $mod+Shift+q kill

          # start dmenu (a program launcher)
          bindsym $mod+d exec dmenu_run

          # Added custom keybindings for Google Chrome and VS Code
          bindsym $mod+Shift+g exec google-chrome-stable --force-device-scale-factor=2.5
          bindsym $mod+Shift+v exec code --force-device-scale-factor=2.5

          # change focus
          bindsym $mod+j focus left
          bindsym $mod+k focus down
          bindsym $mod+l focus up
          bindsym $mod+semicolon focus right

          # alternatively, you can use the cursor keys:
          # bindsym $mod+Left focus left
          # bindsym $mod+Down focus down
          # bindsym $mod+Up focus up
          # bindsym $mod+Right focus right

          # move focused window
          bindsym $mod+Shift+j move left
          bindsym $mod+Shift+k move down
          bindsym $mod+Shift+l move up
          bindsym $mod+Shift+semicolon move right

          # alternatively, you can use the cursor keys:
          # bindsym $mod+Shift+Left move left
          # bindsym $mod+Shift+Down move down
          # bindsym $mod+Shift+Up move up
          # bindsym $mod+Shift+Right move right

          # split in horizontal orientation
          bindsym $mod+h split h

          # split in vertical orientation
          bindsym $mod+v split v

          # enter fullscreen mode for the focused container
          bindsym $mod+f fullscreen toggle

          # change container layout (stacked, tabbed, toggle split)
          bindsym $mod+s layout stacking
          bindsym $mod+w layout tabbed
          bindsym $mod+e layout toggle split

          # change focus between tiling / floating windows
          bindsym $mod+Shift+space floating toggle

          # change focus to the parent container
          bindsym $mod+a focus parent

          # change to workspace
          bindsym $mod+1 workspace number 1
          bindsym $mod+2 workspace number 2
          bindsym $mod+3 workspace number 3
          bindsym $mod+4 workspace number 4
          bindsym $mod+5 workspace number 5
          bindsym $mod+6 workspace number 6
          bindsym $mod+7 workspace number 7
          bindsym $mod+8 workspace number 8
          bindsym $mod+9 workspace number 9
          bindsym $mod+0 workspace number 10

          # move focused container to workspace
          bindsym $mod+Shift+1 move container to workspace number 1
          bindsym $mod+Shift+2 move container to workspace number 2
          bindsym $mod+Shift+3 move container to workspace number 3
          bindsym $mod+Shift+4 move container to workspace number 4
          bindsym $mod+Shift+5 move container to workspace number 5
          bindsym $mod+Shift+6 move container to workspace number 6
          bindsym $mod+Shift+7 move container to workspace number 7
          bindsym $mod+Shift+8 move container to workspace number 8
          bindsym $mod+Shift+9 move container to workspace number 9
          bindsym $mod+Shift+0 move container to workspace number 10

          # reload the configuration file
          bindsym $mod+Shift+r reload

          # restart i3 inplace (preserves your layout/session, most of the time)
          bindsym $mod+r restart

          # exit i3 (logs you out of your X session)
          bindsym $mod+Shift+e exec "i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -b 'Yes, exit i3' 'i3-msg exit'"

          # resize window (you can also use the mouse for that)
          mode "resize" {
                  # These bindings trigger as soon as you enter the resize mode

                  # Pressing left will shrink the window’s width.
                  # Pressing right will grow the window’s width.
                  # Pressing up will shrink the window’s height.
                  # Pressing down will grow the window’s height.
                  bindsym j resize shrink width 10 px or 10 ppt
                  bindsym k resize grow height 10 px or 10 ppt
                  bindsym l resize shrink height 10 px or 10 ppt
                  bindsym semicolon resize grow width 10 px or 10 ppt

                  # same bindings, but for the arrow keys
                  bindsym Left resize shrink width 10 px or 10 ppt
                  bindsym Down resize grow height 10 px or 10 ppt
                  bindsym Up resize shrink height 10 px or 10 ppt
                  bindsym Right resize grow width 10 px or 10 ppt

                  # back to normal: Enter or Escape
                  bindsym Return mode "default"
                  bindsym Escape mode "default"
          }

          bindsym $mod+r mode "resize"
      when: desktop_environment == "i3"

    - name: Configure Alacritty font size
      ansible.builtin.blockinfile:
        path: "{{ user_home_to_configure }}/.config/alacritty/alacritty.yml"
        create: yes
        owner: "{{ ansible_user_to_configure }}"
        group: "{{ ansible_user_to_configure }}"
        mode: '0644'
        block: |
          # Alacritty configuration
          font:
            size: 14.0
      when: desktop_environment == "i3" # Corrected placement of 'when'

    - name: Enable LightDM for i3
      ansible.builtin.systemd:
        name: lightdm
        enabled: yes
      when: desktop_environment == "i3"

    - name: Set graphical.target as default
      ansible.builtin.command: systemctl set-default graphical.target
      notify: Set graphical target

    #########################################################################
    # Virtualization-Specific Tools
    #########################################################################

    - name: Install VMware Tools
      ansible.builtin.dnf:
        name:
          - open-vm-tools
          - open-vm-tools-desktop
        state: present
      when: virtualization_platform == "vmware"

    - name: Enable and start vmtoolsd.service
      ansible.builtin.systemd:
        name: vmtoolsd.service
        enabled: true
        state: started
      when: virtualization_platform == "vmware"

    - name: Install UTM dependencies (spice-vdagent)
      ansible.builtin.dnf:
        name: spice-vdagent
        state: present
      when: virtualization_platform == "utm"

    - name: Enable and start spice-vdagent
      ansible.builtin.systemd:
        name: spice-vdagentd
        enabled: true
        state: started
      when: virtualization_platform == "utm"

    #########################################################################
    # Development Tools
    #########################################################################

    - name: Set Git name and email
      ansible.builtin.shell: |
        git config --global user.name "drowsyrobotboy"
        git config --global user.email "maruthisharma@live.in"
        git config --global init.defaultBranch main
      become_user: "{{ ansible_user_to_configure }}"
      # This task will run as the specified user to configure their global Git settings.

    - name: Install Zig, Go, Alacritty
      ansible.builtin.dnf:
        name:
          - zig
          - golang
          - alacritty
        state: present
      # Alacritty is now also explicitly installed as part of i3 dependencies.
      # Keeping it here ensures it's installed even if i3 isn't chosen, but it's redundant if i3 is chosen.

    - name: Check if Rust is installed
      ansible.builtin.stat:
        path: "{{ user_home_to_configure }}/.cargo/bin/rustc"
      register: rust_installed
      # Run stat as the user to check their home directory.
      become: yes
      become_user: "{{ ansible_user_to_configure }}"

    - name: Install Rust with rustup
      ansible.builtin.shell: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      args:
        executable: /bin/bash
      when: not rust_installed.stat.exists
      # Run as the user to install into their home directory.
      become: yes
      become_user: "{{ ansible_user_to_configure }}"
      environment:
        HOME: "{{ user_home_to_configure }}" # Ensure HOME is set correctly for rustup

    - name: Add Rust to PATH in .bashrc
      ansible.builtin.lineinfile:
        path: "{{ user_home_to_configure }}/.bashrc"
        line: 'export PATH="$HOME/.cargo/bin:$PATH"'
        state: present
        create: yes
        owner: "{{ ansible_user_to_configure }}"
        group: "{{ ansible_user_to_configure }}"
      # This task needs to be run as root to modify the user's .bashrc,
      # but the owner/group ensures the file permissions are correct for the user.

    - name: Check if NVM is installed
      ansible.builtin.stat:
        path: "{{ user_home_to_configure }}/.nvm/nvm.sh"
      register: nvm_script_stat
      # Run stat as the user.
      become: yes
      become_user: "{{ ansible_user_to_configure }}"

    - name: Download and install NVM
      ansible.builtin.shell: |
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/{{ nvm_version }}/install.sh | bash
      args:
        executable: /bin/bash
      when: not nvm_script_stat.stat.exists
      # Run as the user to install into their home directory.
      become: yes
      become_user: "{{ ansible_user_to_configure }}"
      environment:
        HOME: "{{ user_home_to_configure }}" # Ensure HOME is set correctly for NVM install script

    - name: Install Node.js with NVM
      ansible.builtin.shell: |
        # Source NVM script to make 'nvm' command available
        export NVM_DIR="{{ user_home_to_configure }}/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        nvm install {{ node_version_to_install }}
        nvm alias default {{ node_version_to_install }}
      args:
        executable: /bin/bash
      # Run as the user to install Node.js into their NVM environment.
      become: yes
      become_user: "{{ ansible_user_to_configure }}"
      environment:
        HOME: "{{ user_home_to_configure }}" # Ensure HOME is set correctly for NVM commands
      when: not nvm_script_stat.stat.exists # Only install if NVM was just installed

    #########################################################################
    # Install VS Code, Docker, Tailscale
    #########################################################################

    - name: Import Microsoft GPG key for VS Code
      ansible.builtin.rpm_key:
        state: present
        key: https://packages.microsoft.com/keys/microsoft.asc

    - name: Add VS Code repository
      ansible.builtin.yum_repository:
        name: vscode
        description: Visual Studio Code
        baseurl: https://packages.microsoft.com/yumrepos/vscode
        enabled: yes
        gpgcheck: yes
        gpgkey: https://packages.microsoft.com/keys/microsoft.asc

    - name: Install VS Code
      ansible.builtin.dnf:
        name: code
        state: present

    - name: Import Docker GPG key
      ansible.builtin.rpm_key:
        state: present
        key: https://download.docker.com/linux/fedora/gpg

    - name: Add Docker repository
      ansible.builtin.yum_repository:
        name: docker-ce-stable
        description: Docker CE Stable
        baseurl: "https://download.docker.com/linux/fedora/{{ ansible_distribution_major_version }}/$basearch/stable"
        enabled: yes
        gpgcheck: yes
        gpgkey: https://download.docker.com/linux/fedora/gpg

    - name: Install Docker
      ansible.builtin.dnf:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present

    - name: Enable and start Docker
      ansible.builtin.systemd:
        name: docker
        enabled: yes
        state: started

    - name: Add user to docker group
      ansible.builtin.user:
        name: "{{ ansible_user_to_configure }}"
        groups: docker
        append: yes
      notify: Docker group info

    - name: Add Tailscale repository
      ansible.builtin.yum_repository:
        name: tailscale-stable
        description: Tailscale stable
        baseurl: "https://pkgs.tailscale.com/stable/fedora/{{ ansible_distribution_major_version }}/$basearch"
        enabled: yes
        gpgcheck: yes
        gpgkey: https://pkgs.tailscale.com/stable/fedora/repo.gpg

    - name: Install Tailscale
      ansible.builtin.dnf:
        name: tailscale
        state: present

    - name: Enable Tailscale service
      ansible.builtin.systemd:
        name: tailscaled
        enabled: yes
      notify: Tailscale setup info

    #########################################################################
    # Browser Installation
    #########################################################################

    # The 'ansible.builtin.setup' task is generally not needed explicitly
    # as facts are gathered by default at the beginning of a play.
    # Keeping it won't hurt, but it's redundant here.
    - name: Gather architecture facts
      ansible.builtin.setup:
        filter: ansible_architecture

    - name: Install Google Chrome for x86_64
      block:
        - name: Add Google Chrome repository
          ansible.builtin.yum_repository:
            name: google-chrome
            description: Google Chrome
            baseurl: http://dl.google.com/linux/chrome/rpm/stable/$basearch
            enabled: yes
            gpgcheck: yes
            gpgkey: https://dl.google.com/linux/linux_signing_key.pub

        - name: Install Google Chrome
          ansible.builtin.dnf:
            name: google-chrome-stable
            state: present
      when: ansible_facts.architecture == "x86_64"

    - name: Install Chromium for non-x86_64 architectures
      ansible.builtin.dnf:
        name: chromium
        state: present
      when: ansible_facts.architecture != "x86_64"

    - name: Install Firefox browser
      ansible.builtin.dnf:
        name: firefox
        state: present

    #########################################################################
    # Icon Theme Installation
    #########################################################################

    - name: Ensure .icons directory exists for Papirus
      ansible.builtin.file:
        path: "{{ user_home_to_configure }}/.icons"
        state: directory
        mode: '0755'
        owner: "{{ ansible_user_to_configure }}"
        group: "{{ ansible_user_to_configure }}"
      when: desktop_environment == "gnome" or desktop_environment == "i3"

    - name: Check if Papyrus icon theme is installed
      ansible.builtin.stat:
        path: "{{ user_home_to_configure }}/.icons/Papirus"
      register: papyrus_theme_stat
      become: yes
      become_user: "{{ ansible_user_to_configure }}"
      when: desktop_environment == "gnome" or desktop_environment == "i3"

    - name: Install Papyrus icon theme
      ansible.builtin.shell: |
        wget -qO- https://git.io/papirus-icon-theme-install | sh
      args:
        executable: /bin/bash
      become: yes
      become_user: "{{ ansible_user_to_configure }}"
      environment:
        HOME: "{{ user_home_to_configure }}" # Ensure HOME is set correctly for the install script
      when: (desktop_environment == "gnome" or desktop_environment == "i3") and not papyrus_theme_stat.stat.exists

  handlers:
    - name: Set graphical target
      ansible.builtin.command: systemctl set-default graphical.target

    - name: Docker group info
      ansible.builtin.debug:
        msg: "User {{ ansible_user_to_configure }} added to docker group. You may need to log out and log in again for Docker permissions to take effect."

    - name: Tailscale setup info
      ansible.builtin.debug:
        msg: "Tailscale installed and service enabled. Run 'sudo tailscale up' to connect to your Tailnet."
